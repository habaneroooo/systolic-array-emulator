Syntax:
All parametres are separated by one tabulation unless indicate otherwise.

Data :

Each processor has 4 I/O registers, disposed as such:
	U
L processor R
	D
	
Exemple: 2x2 array

	U1		U2
L1 proc1 R1 proc2 R2
	D1		D2
L2 proc3 R3 proc4 R4
	D3		D4

In addition, a temporary register stores the results of operations. 
The final result is copied to both output registers (R&D);

All registers are 32bits wide.

You can also create registers by using the macro #register (see the Macro section)

Operations

(t,x,y,o)	: indicates the data to process, their format and where to store the result. It is ignored for ø (= void).
		ex: /(x,y) divide x by y, stores the result in o. Default stores it in the temporary register.
		"t" indicates the type of data. 
		Data can be:
		"ul","sl": unsigned/signed long int
		"f": floating point
		"ud","sd": 8bit signed/unsigned int
		"us","ss": 16bit signed/unsigned int
		Default is signed long int.
		
{}	: groups operations and execute them in order (left to right) in one systolic cycle.
,	: separates operations when queued with brackets

<x	: Charge data. "x" is either "L" or "U".
>x	: Ouput data. "x" is either "R" or "D"
	  When queued in brackets, order does not matter, it is always the last operation executed.
	  If not defined, it returns the result of the last operation
	  
*	: multiply
+	: add
-	: subtract
/	: divide
ø	: void  / do nothing.
%	: comment. Line ignored.
&	: logic AND
|	; logic

Macros

#register	name
Creates a 32bits register so you can store data inbetween calculations.
This macro cannot be used after the calculation description has started or it will be ignored.


#calculation	name	number of cycles

A calculation is a series of process. There must be at least one 

#process	X	Y
X is the series of operation each diagonal will operate each after another.
Y is the number of times that process is executed before going on to the next process.

#end	calculation: quits calculation mode