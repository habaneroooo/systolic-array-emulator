void fGetNBProcess(FILE * p_file,t_tools * p_Tools, unsigned int * nbProcessDeclared)
{
	unsigned int vEnd = 0;
	unsigned int vTest = 0;
	unsigned int vIndex = 0;
	int vLengthRead = 0;
	fpos_t stream_pos;
	
	/* Save the position of the stream indicator */
	vTest= fgetpos(p_file,&stream_pos);
	if(vTest)
	{
		printf("Error reading file\n");
		//~ exit(-1);
	}
	else
	{
		*nbProcessDeclared = 0;
		p_Tools->context = calculation;
		do
		{
			/* Gets a new line to parse */
			vLengthRead = fgetline(p_file,&p_Tools->MaxStringSize,&p_Tools->String);
			p_Tools->Buffer = (char*)realloc(p_Tools->String,p_Tools->MaxStringSize);
			
			if(vLengthRead > 0)
			{
				vIndex = 0;
				do
				{
					/* '3' here is the number of characters in "end" */
					sscanf(p_Tools->String+vIndex*3,"%3s",p_Tools->Buffer);
					vLengthRead -= 3;
										
					if(!strncmp(p_Tools->Buffer,TOKEN_BEGIN_PROCESS,1))
					{
						if(p_Tools->context == calculation)
						{
							p_Tools->context = process;
						}
						else
						{
							printf("Syntax Error at line %d",p_Tools->line);
							//~ exit(-1);
						}
					}
					else if(!strncmp(p_Tools->Buffer,TOKEN_END_PROCESS,2))
					{
						if(p_Tools->context == process)
						{
							*nbProcessDeclared+=1;
							p_Tools->context = calculation;
						}
						else
						{
							printf("Syntax Error at line %d",p_Tools->line);
							//~ exit(-1);
						}
					}
					else if(!strncmp(p_Tools->Buffer,"end",3))
					{
						
						if(!(p_Tools->context == calculation))
						{
							printf("Syntax Error at line %d",p_Tools->line);
							//~ exit(-1);
						}
						vEnd = 1;
					}
				}while(vLengthRead > 0);
			} /* end if vLengthRead == 0 */
		}while(!vEnd && (vLengthRead > 0));
	}
	/* Restores the position of the stream indicator */
	vTest= fsetpos(p_file,&stream_pos);
	if(vTest)
	{
		perror("The following error occured: ");
		//~ exit(-1);
	}
}